import logging
import threading
from functools import wraps

from impacket.dcerpc.v5.dcom import wmi
from impacket.dcerpc.v5.dcomrt import DCOMConnection
from impacket.dcerpc.v5.dtypes import NULL

logger = logging.getLogger(__name__)


# Due to the limitations of impacket library we should only run one WmiConnection at a time
# Use impacket_user decorator to ensure that no race conditions are happening
# See comments in https://github.com/guardicore/monkey/pull/1766
lock = threading.Lock()


class AccessDeniedException(Exception):
    def __init__(self, host, username, password, domain):
        super(AccessDeniedException, self).__init__(
            "Access is denied to %r with username %s\\%s and password %r"
            % (host, domain, username, password)
        )


class WmiTools(object):
    @staticmethod
    def impacket_user(func):
        @wraps(func)
        def _wrapper(*args, **kwarg):
            logger.debug("Waiting for impacket lock")
            with lock:
                logger.debug("Acquired impacket lock")
                return func(*args, **kwarg)

        return _wrapper

    class WmiConnection(object):
        def __init__(self):
            self._dcom = None
            self._iWbemServices = None

        @property
        def connected(self):
            return self._dcom is not None

        def connect(self, host, username, password, domain=None, lmhash="", nthash=""):
            if not domain:
                domain = host.ip_addr

            # Impacket has a hard-coded timeout of 30 seconds
            dcom = DCOMConnection(
                host.ip_addr,
                username=username,
                password=password,
                domain=domain,
                lmhash=lmhash,
                nthash=nthash,
                oxidResolver=True,
            )

            try:
                iInterface = dcom.CoCreateInstanceEx(
                    wmi.CLSID_WbemLevel1Login, wmi.IID_IWbemLevel1Login
                )
            except Exception as exc:
                try:
                    dcom.disconnect()
                except KeyError:
                    logger.exception("Disconnecting the DCOMConnection failed")

                if "rpc_s_access_denied" == exc.error_string:
                    raise AccessDeniedException(host, username, password, domain)

                raise

            iWbemLevel1Login = wmi.IWbemLevel1Login(iInterface)

            try:
                self._iWbemServices = iWbemLevel1Login.NTLMLogin("//./root/cimv2", NULL, NULL)
                self._dcom = dcom
            except Exception:
                dcom.disconnect()

                raise
            finally:
                iWbemLevel1Login.RemRelease()

        def close(self):
            assert self.connected, "WmiConnection isn't connected"

            self._iWbemServices.RemRelease()
            self._iWbemServices = None

            self._dcom.disconnect()
            self._dcom = None

    @staticmethod
    def dcom_wrap(func):
        @wraps(func)
        def _wrapper(*args, **kwarg):
            try:
                logger.debug("Running function from dcom_wrap")
                return func(*args, **kwarg)
            finally:
                logger.debug("Running dcom cleanup")
                WmiTools.dcom_cleanup()

        return _wrapper

    @staticmethod
    def dcom_cleanup():
        for port_map in list(DCOMConnection.PORTMAPS.keys()):
            del DCOMConnection.PORTMAPS[port_map]
        for oid_set in list(DCOMConnection.OID_SET.keys()):
            del DCOMConnection.OID_SET[oid_set]

        DCOMConnection.OID_SET = {}
        DCOMConnection.PORTMAPS = {}
        if DCOMConnection.PINGTIMER:
            DCOMConnection.PINGTIMER.cancel()
            DCOMConnection.PINGTIMER.join()
            DCOMConnection.PINGTIMER = None

    @staticmethod
    def get_object(wmi_connection, object_name):
        assert isinstance(wmi_connection, WmiTools.WmiConnection)
        assert wmi_connection.connected, "WmiConnection isn't connected"

        return wmi_connection._iWbemServices.GetObject(object_name)[0]
