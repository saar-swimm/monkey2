import logging
from dataclasses import dataclass
from typing import List

from monkey_island.cc.database import mongo
from monkey_island.cc.services.node import NodeService
from monkey_island.cc.services.reporting.issue_processing.exploit_processing.exploiter_descriptor_enum import (  # noqa: E501
    ExploiterDescriptorEnum,
)

logger = logging.getLogger(__name__)


@dataclass
class MonkeyExploitation:
    label: str
    ip_addresses: List[str]
    domain_name: str
    exploits: List[str]


def get_monkey_exploited() -> List[MonkeyExploitation]:
    exploited_nodes_monkeys_launched = [
        NodeService.get_displayed_node_by_id(monkey["_id"], True)
        for monkey in mongo.db.monkey.find({}, {"_id": 1})
        if not NodeService.get_monkey_manual_run(NodeService.get_monkey_by_id(monkey["_id"]))
    ]

    # The node got exploited, but no monkeys got launched.
    # For example the exploited machine was too old.
    exploited_nodes_monkeys_failed = [
        NodeService.get_displayed_node_by_id(node["_id"], True)
        for node in mongo.db.node.find({"exploited": True}, {"_id": 1})
    ]

    exploited = exploited_nodes_monkeys_launched + exploited_nodes_monkeys_failed

    exploited = [
        MonkeyExploitation(
            label=exploited_node["label"],
            ip_addresses=exploited_node["ip_addresses"],
            domain_name=exploited_node["domain_name"],
            exploits=get_exploits_used_on_node(exploited_node),
        )
        for exploited_node in exploited
    ]

    logger.info("Exploited nodes generated for reporting")

    return exploited


def get_exploits_used_on_node(node: dict) -> List[str]:
    return list(
        set(
            [
                ExploiterDescriptorEnum.get_by_class_name(exploit["exploiter"]).display_name
                for exploit in node["exploits"]
                if exploit["exploitation_result"]
            ]
        )
    )
