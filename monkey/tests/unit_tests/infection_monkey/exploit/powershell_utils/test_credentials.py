import sys
from unittest.mock import MagicMock

import pytest

from infection_monkey.exploit.powershell_utils.credentials import (
    Credentials,
    SecretType,
    get_credentials,
)

# Use the path_win32api_get_user_name fixture for all tests in this module
pytestmark = pytest.mark.usefixtures("patch_win32api_get_user_name")

TEST_USERNAMES = ["user1", "user2"]
TEST_PASSWORDS = ["p1", "p2"]
TEST_LM_HASHES = ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"]
TEST_NT_HASHES = ["cccccccccccccccccccccccccccccccc", "dddddddddddddddddddddddddddddddd"]


@pytest.fixture(scope="module")
def windows_false_usernames():
    usernames = TEST_USERNAMES.copy()
    usernames.extend([f".\\{u}" for u in TEST_USERNAMES])

    return usernames


@pytest.fixture(scope="module")
def windows_true_usernames(local_user):
    usernames = TEST_USERNAMES.copy()
    usernames.append(local_user.username)
    usernames = (
        usernames
        + [f".\\{u}" for u in usernames]
        + [f"{local_user.domain}\\{u}" for u in usernames]
    )

    return usernames


def test_get_credentials__empty_windows_true():
    results = get_credentials([], [], [], [], True)

    assert Credentials(username=None, secret=None, secret_type=SecretType.CACHED) in results


def test_get_credentials__empty_windows_false():
    results = get_credentials([], [], [], [], False)

    assert len(results) == 0


def assert_secrets_in_results(usernames, secrets, secret_type, results):
    for u in usernames:
        for s in secrets:
            assert Credentials(username=u, secret=s, secret_type=secret_type) in results


def test_get_credentials__username_only_windows_true(windows_true_usernames):
    results = get_credentials(TEST_USERNAMES, [], [], [], True)

    assert len(results) == 19
    assert_secrets_in_results(windows_true_usernames, [""], SecretType.PASSWORD, results)
    assert_secrets_in_results(windows_true_usernames, [None], SecretType.CACHED, results)


def test_get_credentials__username_only_windows_false(windows_false_usernames):
    results = get_credentials(TEST_USERNAMES, [], [], [], False)

    assert len(results) == 4
    assert_secrets_in_results(windows_false_usernames, [""], SecretType.PASSWORD, results)


def test_get_credentials__username_password_windows_true(windows_true_usernames):
    results = get_credentials(TEST_USERNAMES, TEST_PASSWORDS, [], [], True)

    assert_secrets_in_results(windows_true_usernames, TEST_PASSWORDS, SecretType.PASSWORD, results)


def test_get_credentials__username_lm_hash_windows_false(windows_false_usernames):
    results = get_credentials(TEST_USERNAMES, TEST_PASSWORDS, TEST_LM_HASHES, [], False)

    assert len(results) == 20
    assert_secrets_in_results(windows_false_usernames, TEST_LM_HASHES, SecretType.LM_HASH, results)


def test_get_credentials__username_lm_hash_windows_true(windows_true_usernames):
    results = get_credentials(TEST_USERNAMES, TEST_PASSWORDS, TEST_LM_HASHES, [], True)

    assert_secrets_in_results(windows_true_usernames, TEST_LM_HASHES, SecretType.LM_HASH, results)


def test_get_credentials__username_nt_hash_windows_false(windows_false_usernames):
    results = get_credentials(TEST_USERNAMES, TEST_PASSWORDS, TEST_LM_HASHES, TEST_NT_HASHES, False)

    assert len(results) == 28
    assert_secrets_in_results(windows_false_usernames, TEST_NT_HASHES, SecretType.NT_HASH, results)


def test_get_credentials__username_nt_hash_windows_true(windows_true_usernames):
    results = get_credentials(TEST_USERNAMES, TEST_PASSWORDS, TEST_LM_HASHES, TEST_NT_HASHES, True)

    assert_secrets_in_results(windows_true_usernames, TEST_NT_HASHES, SecretType.NT_HASH, results)


def test_get_credentials__get_username_failure(windows_false_usernames):
    win32api = MagicMock()
    win32api.GetUserNameEx = MagicMock(side_effect=Exception("win32api test failure"))
    win32api.NameSamCompatible = None
    sys.modules["win32api"] = win32api

    results = get_credentials(TEST_USERNAMES, [], [], [], True)

    assert len(results) == 9
    assert_secrets_in_results(windows_false_usernames, [""], SecretType.PASSWORD, results)
